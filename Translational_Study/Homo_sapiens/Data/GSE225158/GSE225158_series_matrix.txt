!Series_title	"Transcriptional responses of the human dorsal striatum in opioid use disorder implicates cell type-specifc programs"
!Series_geo_accession	"GSE225158"
!Series_status	"Public on Nov 28 2023"
!Series_submission_date	"Feb 13 2023"
!Series_last_update_date	"Feb 14 2024"
!Series_pubmed_id	"38296993"
!Series_summary	"Gene expression profile at single cell level of striatal cells from the caudate nucleus and putamen in postmortem human brains of unaffected individuals or those with opioid use disorder."
!Series_overall_design	"Case-cohort matched postmortem human brain single nucleus RNA-seq of the caudate nucleus and putamen of individuals with and without opioid use disorder"
!Series_type	"Expression profiling by high throughput sequencing"
!Series_contributor	"Madelyn,H,Ray"
!Series_contributor	"BaDoi,N,Phan"
!Series_contributor	"Andreas,R,Pfenning"
!Series_contributor	"Ryan,W,Logan"
!Series_sample_id	"GSM7040221 GSM7040222 GSM7040223 GSM7040224 GSM7040225 GSM7040226 GSM7040227 GSM7040228 GSM7040229 GSM7040230 GSM7040231 GSM7040232 GSM7040233 GSM7040234 GSM7040235 GSM7040236 GSM7040237 GSM7040238 GSM7040239 GSM7040240 GSM7040241 GSM7040242 GSM7040243 GSM7040244 "
!Series_contact_name	"BaDoi,Nguyen,Phan"
!Series_contact_email	"badoi.phan@pitt.edu"
!Series_contact_laboratory	"Pfenning Lab"
!Series_contact_department	"Computational Biology"
!Series_contact_institute	"Carnegie Mellon University"
!Series_contact_address	"5000 Forbes Ave"
!Series_contact_city	"Pittsburgh"
!Series_contact_state	"PA"
!Series_contact_zip/postal_code	"15213"
!Series_contact_country	"USA"
!Series_supplementary_file	"ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE225nnn/GSE225158/suppl/GSE225158_BU_OUD_Striatum_refined_all_SeuratObj_N22.h5Seurat"
!Series_supplementary_file	"ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE225nnn/GSE225158/suppl/GSE225158_BU_OUD_Striatum_refined_all_SeuratObj_N22.h5ad.gz"
!Series_platform_id	"GPL18573"
!Series_platform_taxid	"9606"
!Series_sample_taxid	"9606"
!Series_relation	"SubSeries of: GSE233279"
!Series_relation	"BioProject: https://www.ncbi.nlm.nih.gov/bioproject/PRJNA934272"

!Sample_title	"C-1366"	"C-13281"	"C-1252"	"C-1670"	"C-1262"	"C-13114"	"C-13151"	"C-612"	"C-13291"	"C-1488"	"P-1366"	"P-13281"	"P-1252"	"P-1670"	"P-1262"	"P-13114"	"P-13151"	"P-612"	"P-13291"	"P-1488"	"C-1034"	"P-1034"	"C-1572"	"P-1572"
!Sample_geo_accession	"GSM7040221"	"GSM7040222"	"GSM7040223"	"GSM7040224"	"GSM7040225"	"GSM7040226"	"GSM7040227"	"GSM7040228"	"GSM7040229"	"GSM7040230"	"GSM7040231"	"GSM7040232"	"GSM7040233"	"GSM7040234"	"GSM7040235"	"GSM7040236"	"GSM7040237"	"GSM7040238"	"GSM7040239"	"GSM7040240"	"GSM7040241"	"GSM7040242"	"GSM7040243"	"GSM7040244"
!Sample_status	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"	"Public on Nov 28 2023"
!Sample_submission_date	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"	"Feb 13 2023"
!Sample_last_update_date	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"	"Nov 28 2023"
!Sample_type	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"
!Sample_channel_count	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"
!Sample_source_name_ch1	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"	"postmortem brain tissue"
!Sample_organism_ch1	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"
!Sample_characteristics_ch1	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Caudate"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Putamen"	"tissue: Caudate"	"tissue: Putamen"	"tissue: Caudate"	"tissue: Putamen"
!Sample_characteristics_ch1	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"	"cell type: striatal cells"
!Sample_characteristics_ch1	"pair: 1"	"pair: 6"	"pair: 4"	"pair: 12"	"pair: 14"	"pair: 3"	"pair: 6"	"pair: 20"	"pair: 2"	"pair: 4"	"pair: 1"	"pair: 6"	"pair: 4"	"pair: 12"	"pair: 14"	"pair: 3"	"pair: 6"	"pair: 20"	"pair: 2"	"pair: 4"	"pair: 11"	"pair: 11"	"pair: 11"	"pair: 11"
!Sample_characteristics_ch1	"subject: 1366"	"subject: 13281"	"subject: 1252"	"subject: 1670"	"subject: 1262"	"subject: 13114"	"subject: 13151"	"subject: 612"	"subject: 13291"	"subject: 1488"	"subject: 1366"	"subject: 13281"	"subject: 1252"	"subject: 1670"	"subject: 1262"	"subject: 13114"	"subject: 13151"	"subject: 612"	"subject: 13291"	"subject: 1488"	"subject: 1034"	"subject: 1034"	"subject: 1572"	"subject: 1572"
!Sample_characteristics_ch1	"Sex: F"	"Sex: F"	"Sex: M"	"Sex: M"	"Sex: M"	"Sex: F"	"Sex: F"	"Sex: M"	"Sex: M"	"Sex: M"	"Sex: F"	"Sex: F"	"Sex: M"	"Sex: M"	"Sex: M"	"Sex: F"	"Sex: F"	"Sex: M"	"Sex: M"	"Sex: M"	"Sex: F"	"Sex: F"	"Sex: F"	"Sex: F"
!Sample_characteristics_ch1	"race: W"	"race: W"	"race: W"	"race: W"	"race: W"	"race: B"	"race: W"	"race: W"	"race: B"	"race: B"	"race: W"	"race: W"	"race: W"	"race: W"	"race: W"	"race: B"	"race: W"	"race: W"	"race: B"	"race: B"	"race: W"	"race: W"	"race: W"	"race: W"
!Sample_characteristics_ch1	"age: 35"	"age: 54"	"age: 40"	"age: 42"	"age: 41"	"age: 54"	"age: 55"	"age: 60"	"age: 37"	"age: 39"	"age: 35"	"age: 54"	"age: 40"	"age: 42"	"age: 41"	"age: 54"	"age: 55"	"age: 60"	"age: 37"	"age: 39"	"age: 23"	"age: 23"	"age: 35"	"age: 35"
!Sample_characteristics_ch1	"bmi: 35.2"	"bmi: 17.8"	"bmi: 25.9"	"bmi: 36.2"	"bmi: 29.9"	"bmi: 27.6"	"bmi: 44.9"	"bmi: 37.5"	"bmi: 36.3"	"bmi: 33.1"	"bmi: 35.2"	"bmi: 17.8"	"bmi: 25.9"	"bmi: 36.2"	"bmi: 29.9"	"bmi: 27.6"	"bmi: 44.9"	"bmi: 37.5"	"bmi: 36.3"	"bmi: 33.1"	"bmi: 20"	"bmi: 20"	"bmi: 40.9"	"bmi: 40.9"
!Sample_characteristics_ch1	"pmi: 11"	"pmi: 12.5"	"pmi: 21.1"	"pmi: 18.5"	"pmi: 16.3"	"pmi: 13.7"	"pmi: 13.4"	"pmi: 9.6"	"pmi: 18"	"pmi: 21.5"	"pmi: 11"	"pmi: 12.5"	"pmi: 21.1"	"pmi: 18.5"	"pmi: 16.3"	"pmi: 13.7"	"pmi: 13.4"	"pmi: 9.6"	"pmi: 18"	"pmi: 21.5"	"pmi: 8.5"	"pmi: 8.5"	"pmi: 11.8"	"pmi: 11.8"
!Sample_characteristics_ch1	"ph: 6.1"	"ph: 6.9"	"ph: 6.5"	"ph: 6.5"	"ph: 6.7"	"ph: 6.3"	"ph: 6.2"	"ph: 6.8"	"ph: 6.9"	"ph: 6.6"	"ph: 6.1"	"ph: 6.9"	"ph: 6.5"	"ph: 6.5"	"ph: 6.7"	"ph: 6.3"	"ph: 6.2"	"ph: 6.8"	"ph: 6.9"	"ph: 6.6"	"ph: 7"	"ph: 7"	"ph: 6.5"	"ph: 6.5"
!Sample_characteristics_ch1	"rin: 7.1"	"rin: 8.8"	"rin: 7.6"	"rin: 8.1"	"rin: 7.2"	"rin: 8.7"	"rin: 7"	"rin: 9"	"rin: 7.5"	"rin: 8.7"	"rin: 7.1"	"rin: 8.8"	"rin: 7.6"	"rin: 8.1"	"rin: 7.2"	"rin: 8.7"	"rin: 7"	"rin: 9"	"rin: 7.5"	"rin: 8.7"	"rin: 7.8"	"rin: 7.8"	"rin: 9.1"	"rin: 9.1"
!Sample_characteristics_ch1	"tissue.storage.time.mo: 149"	"tissue.storage.time.mo: 24.1"	"tissue.storage.time.mo: 167.5"	"tissue.storage.time.mo: 95.2"	"tissue.storage.time.mo: 168"	"tissue.storage.time.mo: 46.8"	"tissue.storage.time.mo: 41.7"	"tissue.storage.time.mo: 270.2"	"tissue.storage.time.mo: 23.1"	"tissue.storage.time.mo: 127.2"	"tissue.storage.time.mo: 149"	"tissue.storage.time.mo: 24.1"	"tissue.storage.time.mo: 167.5"	"tissue.storage.time.mo: 95.2"	"tissue.storage.time.mo: 168"	"tissue.storage.time.mo: 46.8"	"tissue.storage.time.mo: 41.7"	"tissue.storage.time.mo: 270.2"	"tissue.storage.time.mo: 23.1"	"tissue.storage.time.mo: 127.2"	"tissue.storage.time.mo: 197.2"	"tissue.storage.time.mo: 197.2"	"tissue.storage.time.mo: 111.4"	"tissue.storage.time.mo: 111.4"
!Sample_characteristics_ch1	"dx oud: OUD"	"dx oud: OUD"	"dx oud: OUD"	"dx oud: OUD"	"dx oud: OUD"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: OUD"	"dx oud: OUD"	"dx oud: OUD"	"dx oud: OUD"	"dx oud: OUD"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: None"	"dx oud: OUD"	"dx oud: OUD"
!Sample_characteristics_ch1	"dx substances: Poly-SUD"	"dx substances: Poly-SUD"	"dx substances: Poly-SUD"	"dx substances: OUD-only"	"dx substances: Poly-SUD"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: Poly-SUD"	"dx substances: Poly-SUD"	"dx substances: Poly-SUD"	"dx substances: OUD-only"	"dx substances: Poly-SUD"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: None"	"dx substances: OUD-only"	"dx substances: OUD-only"
!Sample_characteristics_ch1	"dx comorbid: Pain Disorder"	"dx comorbid: None"	"dx comorbid: MDD"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: Pain Disorder"	"dx comorbid: None"	"dx comorbid: MDD"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"	"dx comorbid: None"
!Sample_characteristics_ch1	"dur.oud: 8"	"dur.oud: 5"	"dur.oud: 13"	"dur.oud: 17"	"dur.oud: 4"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 8"	"dur.oud: 5"	"dur.oud: 13"	"dur.oud: 17"	"dur.oud: 4"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 0"	"dur.oud: 5"	"dur.oud: 5"
!Sample_characteristics_ch1	"dsm.iv.sud: Opioid Dependence; Sedative or Hypnotic or Anxiolytic Dependence"	"dsm.iv.sud: Opioid Dependence; Sedative or Hypnotic or Anxiolytic Dependence"	"dsm.iv.sud: Opioid Dependence; Alcohol Dependence; Cocaine Dependence; Polysubstance Dependence"	"dsm.iv.sud: Opioid Dependence"	"dsm.iv.sud: Opioid Dependence; Cocaine Dependence; Sedative or Hypnotic or Anxiolytic Dependence"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"dsm.iv.sud: Opioid Dependence; Sedative or Hypnotic or Anxiolytic Dependence"	"dsm.iv.sud: Opioid Dependence; Sedative or Hypnotic or Anxiolytic Dependence"	"dsm.iv.sud: Opioid Dependence; Alcohol Dependence; Cocaine Dependence; Polysubstance Dependence"	"dsm.iv.sud: Opioid Dependence"	"dsm.iv.sud: Opioid Dependence; Cocaine Dependence; Sedative or Hypnotic or Anxiolytic Dependence"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"blood.toxicology: No substances detected"	"dsm.iv.sud: Opioid Dependence"	"dsm.iv.sud: Opioid Dependence"
!Sample_characteristics_ch1	"dsm.iv.psych: Pain Disorder Associated with Both Psychological Factors and a General Medical Condition"	"dsm.iv.psych: None"	"dsm.iv.psych: Major Depressive Disorder, Single Episode, Severe without Psychotic Features"	"dsm.iv.psych: None"	"dsm.iv.psych: None"	"infxn.dx: Arthritis"	"infxn.dx: Degenerative Joint Disease"	"medications.atodc: N"	"medications.atodc: U"	"infxn.dx: Asthma"	"dsm.iv.psych: Pain Disorder Associated with Both Psychological Factors and a General Medical Condition"	"dsm.iv.psych: None"	"dsm.iv.psych: Major Depressive Disorder, Single Episode, Severe without Psychotic Features"	"dsm.iv.psych: None"	"dsm.iv.psych: None"	"infxn.dx: Arthritis"	"infxn.dx: Degenerative Joint Disease"	"medications.atodc: N"	"medications.atodc: U"	"infxn.dx: Asthma"	"medications.atodc: N"	"medications.atodc: N"	"dsm.iv.psych: None"	"dsm.iv.psych: None"
!Sample_characteristics_ch1	"blood.toxicology: Methadone, Tramadol, Alprazolam, Diphenhydramine"	"blood.toxicology: Fentanyl, Meprobamate"	"blood.toxicology: Morphine, Phenobarbital, Cocaine Metabolites"	"blood.toxicology: Morphine, Oxycodone"	"blood.toxicology: Fentanyl, Norfentanyl, Lidocaine, Butalbital, Cocaine Metabolites, Trazodone, Alprazolam, Citalopram,  Acetaminophen"	"medications.atodc: O"	"medications.atodc: O"	"tobacco.atod: U"	"tobacco.atod: U"	"medications.atodc: N"	"blood.toxicology: Methadone, Tramadol, Alprazolam, Diphenhydramine"	"blood.toxicology: Fentanyl, Meprobamate"	"blood.toxicology: Morphine, Phenobarbital, Cocaine Metabolites"	"blood.toxicology: Morphine, Oxycodone"	"blood.toxicology: Fentanyl, Norfentanyl, Lidocaine, Butalbital, Cocaine Metabolites, Trazodone, Alprazolam, Citalopram,  Acetaminophen"	"medications.atodc: O"	"medications.atodc: O"	"tobacco.atod: U"	"tobacco.atod: U"	"medications.atodc: N"	"tobacco.atod: N"	"tobacco.atod: N"	"blood.toxicology: Methadone, Methadone Metabolite, Trazodone"	"blood.toxicology: Methadone, Methadone Metabolite, Trazodone"
!Sample_characteristics_ch1	"infxn.dx: Asthma; Recurrent Bronchitis"	"medications.atodc: B, C, D, L, O, P"	"infxn.dx: Arthritis"	"infxn.dx: Osteomyelitis with Non-healing Ulcer; Recurring Foot Infections"	"medications.atodc: B, D"	"tobacco.atod: Y"	"tobacco.atod: N"	"manner.of.death: Accidental"	"manner.of.death: Natural"	"tobacco.atod: Y"	"infxn.dx: Asthma; Recurrent Bronchitis"	"medications.atodc: B, C, D, L, O, P"	"infxn.dx: Arthritis"	"infxn.dx: Osteomyelitis with Non-healing Ulcer; Recurring Foot Infections"	"medications.atodc: B, D"	"tobacco.atod: Y"	"tobacco.atod: N"	"manner.of.death: Accidental"	"manner.of.death: Natural"	"tobacco.atod: Y"	"manner.of.death: Natural"	"manner.of.death: Natural"	"infxn.dx: Osteoarthritis; Degenerative Changes of Cervical Spine"	"infxn.dx: Osteoarthritis; Degenerative Changes of Cervical Spine"
!Sample_characteristics_ch1	"medications.atodc: B, O, Z"	"tobacco.atod: Y"	"medications.atodc: O, Z"	"medications.atodc: O, Z"	"tobacco.atod: N"	"manner.of.death: Natural"	"manner.of.death: Natural"	"cause.of.death: Aspiration"	"cause.of.death: Cardiac Tamponade"	"manner.of.death: Natural"	"medications.atodc: B, O, Z"	"tobacco.atod: Y"	"medications.atodc: O, Z"	"medications.atodc: O, Z"	"tobacco.atod: N"	"manner.of.death: Natural"	"manner.of.death: Natural"	"cause.of.death: Aspiration"	"cause.of.death: Cardiac Tamponade"	"manner.of.death: Natural"	"cause.of.death: Endocardial Fibroelastosis"	"cause.of.death: Endocardial Fibroelastosis"	"medications.atodc: B, O, Z"	"medications.atodc: B, O, Z"
!Sample_characteristics_ch1	"tobacco.atod: Y"	"manner.of.death: Accidental"	"tobacco.atod: Y"	"tobacco.atod: Y"	"manner.of.death: Accidental"	"cause.of.death: Cardiovascular Disease"	"cause.of.death: Cardiovascular Disease"	""	""	"cause.of.death: Pulmonary Embolism"	"tobacco.atod: Y"	"manner.of.death: Accidental"	"tobacco.atod: Y"	"tobacco.atod: Y"	"manner.of.death: Accidental"	"cause.of.death: Cardiovascular Disease"	"cause.of.death: Cardiovascular Disease"	""	""	"cause.of.death: Pulmonary Embolism"	""	""	"tobacco.atod: Y"	"tobacco.atod: Y"
!Sample_characteristics_ch1	"manner.of.death: Accidental"	"cause.of.death: Fentanyl Overdose"	"manner.of.death: Accidental"	"manner.of.death: Accidental"	"cause.of.death: Combined Drug Overdose"	""	""	""	""	""	"manner.of.death: Accidental"	"cause.of.death: Fentanyl Overdose"	"manner.of.death: Accidental"	"manner.of.death: Accidental"	"cause.of.death: Combined Drug Overdose"	""	""	""	""	""	""	""	"manner.of.death: Accidental"	"manner.of.death: Accidental"
!Sample_characteristics_ch1	"cause.of.death: Combined Drug Overdose"	""	"cause.of.death: Combined Drug Overdose"	"cause.of.death: Combined Drug Overdose"	""	""	""	""	""	""	"cause.of.death: Combined Drug Overdose"	""	"cause.of.death: Combined Drug Overdose"	"cause.of.death: Combined Drug Overdose"	""	""	""	""	""	""	""	""	"cause.of.death: Combined Drug Overdose"	"cause.of.death: Combined Drug Overdose"
!Sample_molecule_ch1	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"	"nuclear RNA"
!Sample_extract_protocol_ch1	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."	"Nuclei were isolated from 24 samples of frozen human postmortem brain tissue. Samples weighing 40mg were homogenized in 5mL glass douncers with 1mL lysis buffer containing DAPI using glass pestles using ~10 strokes per pestle. Homogenate was filtered using a 40um mesh strainer (FisherScientific #48680). Nuclei were sorted for DAPI fluorescence using a BD FACS Aria at the Boston University Flow Cytometry Core. Approximately 100,000 nuclei were sorted into 7ul of 0.04% bovine serum albumin (MilliporeSigma #126615) in phosphate buffered saline (ThermoFisher #10010031). Nuclei were counted using a hemocytometer and assessed for concentration and debris. 7,000 nuclei were targeted per sample except for two samples with lower concentrations where 5,000 nuclei were targeted. The 10x Chromium process was performed and next generation sequencing libraries were prepared using the 10x genomics single cell 3’ gene expression dual index kit."
!Sample_extract_protocol_ch1	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."	"Libraries were sequenced at the Boston University Single Cell Sequencing Core. The pool of snRNA-seq libraries were sequenced on 7 Next-seq P3 flow cells with intermediate re-pooling scheme to optimize for 50-80% sequencing saturation, > 8,000 average UMI per cell. Between sequencing runs, we preliminarily aligned the sequencing reads as outlined below to assess quality per sample and estimate the number of viable nuclei and sample complexity. We identified two samples, C-13291 and C-612, to have low quality QC metrics due to wetting failures, mean UMI per cell <1,000 and estimated # cells >50,000. These samples were excluded from subsequent re-pooling and further analyses (Supplemental Table 1.3 tab STARsolo QC)."
!Sample_extract_protocol_ch1	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"	"snRNA-seq"
!Sample_taxid_ch1	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"
!Sample_data_processing	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."	"We aligned single nuclei RNA-seq (snRNA-seq) reads to the human genome (​​GRCh38.p13) for each output with the turn-key single-cell transcriptomics method STARsolo, which is folds faster than the CellRanger pipeline and equally accurate (v2.7.9a) 1. We chose parameters for the STARsolo UMI quantification to closely replicate the 10X Cell-Ranger pipeline v6 and use the filtered genome and gene annotation available from 10X Genomics (https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest, Human reference 2020-A). We ran STARsolo to allow for pre-mRNA gene counts as well as exonic counts for nuclear RNA and to separately count introns and exons for RNA velocity analyses, (--soloFeatures GeneFull Velocyto). We used the following parameters to correct cell barcodes, de-duplicate transcripts by their unique molecular identifier (UMI), assign UMI counts to genes, and pre-filter cells that are likely empty droplets (--soloType Droplet --soloCBmatchWLtype 1MM --soloCellFilter EmptyDrops_CR --soloMultiMappers EM --soloUMIdedup 1MM_CR). We pre-process the UMI gene x cell count matrix to reduce inherent biases in the technology. We identified likely ambient RNA contamination with SoupX 2, empty droplets with DropletQC 3, doublets with scds 4, and damaged nuclei with miQC 5. For each of these analyses, each sample (GEM well) was analyzed separate from each other. We ran SoupX as described to estimate the fraction of ambient RNA from both raw and unfiltered UMI count matrices from STARsolo and perform ambient RNA removal aware of the cell clusters in the filtered matrix. For just the SoupX analyses, we clustered the cells with Seurat v4 6 with FindClusters(algorithm = 2, resolution = 0.5). For DropletQC, we used the intronic and exonic UMI counts per cell per gene from STARsolo to get the fraction of intronic UMI per cell (referred to as the nuclear fraction). We identified empty droplets with default DropletQC parameters (nf_rescue = 0.50, umi_rescue = 1000). We identified droplets with scds’s hybrid algorithm using the function cxds_bcds_hybrid to estimate doublet scores and called doublets on cells with scds.hybrid_score > 1.0. We identified damaged cells with miQC which uses a Bayesian EM algorithm to learn the relationship between mitochondria UMI counts and number of captured genes. We used the posterior probability cutoff of 0.75 to call damaged cells by miQC."
!Sample_data_processing	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."	"To combine cells together across samples, we normalize the UMI counts with the variance-stabilizing SCTransform and glmGamPoi on each sample 7,8 and  jointly embed cells across samples with reciprocal PCA integration 6 as outlined in https://satijalab.org/seurat/articles/integration_rpca.html. In this joint embedding, we over-clustered the dataset with FindClusters(algorithm = 2, resolution = 1)and removed any cluster with more than 10% of cells flagged by miQC, scds, or DropletQC as low-quality biased-clusters in the data."
!Sample_data_processing	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."	"We annotated our cells from the human striatum to a recently published high-resolution snRNA-seq reference dataset of the non-human primate striatum 9 using Seurat v4. We downloaded the monkey snRNA-seq processed, annotated gene UMI counts for all cells and MSNs from GSE167920. He, Kleyman et al. had aligned the snRNA-seq reads to the rheMac10 genome using the GRCh38 gene annotation liftover to rheMac10, so the gene-wise labels represent the UMI counts on the rheMac10 genome most orthologous to human. For both full nuclei and MSN subset datasets, we re-processed the macaque cells with SCTransform , glmGamPoi, and reciprocal PCA with default parameters as above to enable label transfer using the most recent integration algorithms in Seurat."
!Sample_data_processing	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."	"To transfer cell annotations from the reference macaque striatum dataset to the human striatum cells, we perform two label transfers at increasing resolutions: one with all cells and another with just MSNs. As He, Kleyman et al. described, the differences between transcriptionally and anatomically distinct MSN subtypes are subtle, so we split the annotations into two steps to optimally annotate the cells. The first label transfers the cell classes (Oligodendrocytes, MSNs, Interneurons, etc.) from the macaque to the human dataset with the Seurat functions FindTransferAnchors(reduction = ‘rpca’) and  TransferData. Next, we identified cells or cell clusters that were labeled as MSNs and transferred MSN subtype labels (D1.Striosome, D2.Striomsome, etc.) from the macaque to human datasets. We filtered out cells where the cell class or cell subtype labels have max prediction scores less than 0.5 as these tend to represent noisy predictions due to low quality cells from either datasets. We confirmed accurate label transfer at the cell class and cell subtype levels with published marker genes and similar proportions across subjects and samples."
!Sample_data_processing	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."	"Even with the robust cutoffs that we applied to this dataset to remove likely low quality or doublet cells, we find a residual subset of the data that contain these cells. Upon clustering, doublet cells tend to project into the UMAP space as long streaks between two well-defined cell types. Low-quality cell types would project into the UMAP space as amorphous cell types without clear boundaries. Using these embedding features, we selected these clusters with Seurat’s FindClusters(resolution = 1) function, confirmed that they have the indicative QC metrics, and removed them from analyses."
!Sample_data_processing	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"	"Assembly: hg38"
!Sample_data_processing	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated seurat h5 object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"
!Sample_data_processing	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"	"Supplementary files format and content: Annotated scanpy h5ad object with raw, processed, and integrated gene counts by cell aggregating samples across the entire dataset"
!Sample_platform_id	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"	"GPL18573"
!Sample_contact_name	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"	"BaDoi,Nguyen,Phan"
!Sample_contact_email	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"	"badoi.phan@pitt.edu"
!Sample_contact_laboratory	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"	"Pfenning Lab"
!Sample_contact_department	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"	"Computational Biology"
!Sample_contact_institute	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"	"Carnegie Mellon University"
!Sample_contact_address	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"	"5000 Forbes Ave"
!Sample_contact_city	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"	"Pittsburgh"
!Sample_contact_state	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"	"PA"
!Sample_contact_zip/postal_code	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"	"15213"
!Sample_contact_country	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"
!Sample_data_row_count	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"
!Sample_instrument_model	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"	"Illumina NextSeq 500"
!Sample_library_selection	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"
!Sample_library_source	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"	"transcriptomic single cell"
!Sample_library_strategy	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"
!Sample_relation	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270020"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270019"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270018"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270017"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270016"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270015"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270014"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270013"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270012"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270011"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270010"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270009"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270008"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270007"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270006"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270005"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270004"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270003"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270002"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270001"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33270000"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33269999"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33269998"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN33269997"
!Sample_relation	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352014"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352015"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352016"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352017"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352018"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352019"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352020"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352021"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352022"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352023"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352024"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352025"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352026"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352027"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352028"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352029"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352030"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352031"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352032"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352033"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352034"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352035"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352036"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX19352037"
!Sample_supplementary_file_1	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"
!series_matrix_table_begin
"ID_REF"	"GSM7040221"	"GSM7040222"	"GSM7040223"	"GSM7040224"	"GSM7040225"	"GSM7040226"	"GSM7040227"	"GSM7040228"	"GSM7040229"	"GSM7040230"	"GSM7040231"	"GSM7040232"	"GSM7040233"	"GSM7040234"	"GSM7040235"	"GSM7040236"	"GSM7040237"	"GSM7040238"	"GSM7040239"	"GSM7040240"	"GSM7040241"	"GSM7040242"	"GSM7040243"	"GSM7040244"
!series_matrix_table_end
